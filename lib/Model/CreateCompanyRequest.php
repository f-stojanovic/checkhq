<?php
/**
 * CreateCompanyRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateCompanyRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCompanyRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_company_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'legal_name' => 'string',
        'trade_name' => 'string',
        'other_business_name' => 'string',
        'business_type' => 'string',
        'industry_type' => 'string',
        'website' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'address' => '\OpenAPI\Client\Model\CreateCompanyRequestAddress',
        'pay_frequency' => 'string',
        'start_date' => '\DateTime',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'legal_name' => null,
        'trade_name' => null,
        'other_business_name' => null,
        'business_type' => null,
        'industry_type' => null,
        'website' => null,
        'email' => null,
        'phone' => null,
        'address' => null,
        'pay_frequency' => null,
        'start_date' => 'date',
        'metadata' => 'json'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'legal_name' => false,
        'trade_name' => false,
        'other_business_name' => false,
        'business_type' => false,
        'industry_type' => false,
        'website' => false,
        'email' => false,
        'phone' => false,
        'address' => false,
        'pay_frequency' => false,
        'start_date' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'legal_name' => 'legal_name',
        'trade_name' => 'trade_name',
        'other_business_name' => 'other_business_name',
        'business_type' => 'business_type',
        'industry_type' => 'industry_type',
        'website' => 'website',
        'email' => 'email',
        'phone' => 'phone',
        'address' => 'address',
        'pay_frequency' => 'pay_frequency',
        'start_date' => 'start_date',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'legal_name' => 'setLegalName',
        'trade_name' => 'setTradeName',
        'other_business_name' => 'setOtherBusinessName',
        'business_type' => 'setBusinessType',
        'industry_type' => 'setIndustryType',
        'website' => 'setWebsite',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'address' => 'setAddress',
        'pay_frequency' => 'setPayFrequency',
        'start_date' => 'setStartDate',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'legal_name' => 'getLegalName',
        'trade_name' => 'getTradeName',
        'other_business_name' => 'getOtherBusinessName',
        'business_type' => 'getBusinessType',
        'industry_type' => 'getIndustryType',
        'website' => 'getWebsite',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'address' => 'getAddress',
        'pay_frequency' => 'getPayFrequency',
        'start_date' => 'getStartDate',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('trade_name', $data ?? [], null);
        $this->setIfExists('other_business_name', $data ?? [], null);
        $this->setIfExists('business_type', $data ?? [], null);
        $this->setIfExists('industry_type', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('pay_frequency', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name Legal name of the company
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets trade_name
     *
     * @return string|null
     */
    public function getTradeName()
    {
        return $this->container['trade_name'];
    }

    /**
     * Sets trade_name
     *
     * @param string|null $trade_name Trade name of the company
     *
     * @return self
     */
    public function setTradeName($trade_name)
    {
        if (is_null($trade_name)) {
            throw new \InvalidArgumentException('non-nullable trade_name cannot be null');
        }
        $this->container['trade_name'] = $trade_name;

        return $this;
    }

    /**
     * Gets other_business_name
     *
     * @return string|null
     */
    public function getOtherBusinessName()
    {
        return $this->container['other_business_name'];
    }

    /**
     * Sets other_business_name
     *
     * @param string|null $other_business_name Other business name used by the company.
     *
     * @return self
     */
    public function setOtherBusinessName($other_business_name)
    {
        if (is_null($other_business_name)) {
            throw new \InvalidArgumentException('non-nullable other_business_name cannot be null');
        }
        $this->container['other_business_name'] = $other_business_name;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string|null
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string|null $business_type Business type of the company. One of `sole_proprietorship`, `partnership`, `c_corporation`, `s_corporation`, or `llc`.
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        if (is_null($business_type)) {
            throw new \InvalidArgumentException('non-nullable business_type cannot be null');
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets industry_type
     *
     * @return string|null
     */
    public function getIndustryType()
    {
        return $this->container['industry_type'];
    }

    /**
     * Sets industry_type
     *
     * @param string|null $industry_type Industry type of the company. One of `auto_or_machine_sales`, `auto_or_machine_repair`, `arts_or_entertainment_or_recreation`, `cleaning_services`, `consulting_services`, `educational_services`, `family_care_services`, `financial_services`, `food_and_beverage_retail_or_wholesale`, `general_construction_or_general_contracting`, `health_care`, `hospitality_or_accommodation`, `hvac_or_plumbing_or_electrical_contracting`, `legal_services`, `non_food_retail_or_wholesale`, `other`, `personal_care_services`, `real_estate`, `restaurant`, `scientific_or_technical_services`, `security_services`, `staffing`, `tobacco_or_alcohol_sales`, or `transportation`.
     *
     * @return self
     */
    public function setIndustryType($industry_type)
    {
        if (is_null($industry_type)) {
            throw new \InvalidArgumentException('non-nullable industry_type cannot be null');
        }
        $this->container['industry_type'] = $industry_type;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Website URL of the company.
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of payroll department or administrator
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number of the company
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\CreateCompanyRequestAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\CreateCompanyRequestAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets pay_frequency
     *
     * @return string|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param string|null $pay_frequency Frequency by which the employees get paid. One of \"weekly\", \"biweekly\", \"semimonthly\", \"monthly\", \"quarterly\", or \"annually\"
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        if (is_null($pay_frequency)) {
            throw new \InvalidArgumentException('non-nullable pay_frequency cannot be null');
        }
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date This date should match up with their first payday using Check. The validity of this date is important, as it's used on federal and state filing authorization forms to signify when Check's authorization to file on behalf of the employer starts.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional loosely structured information to associate with the company
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


