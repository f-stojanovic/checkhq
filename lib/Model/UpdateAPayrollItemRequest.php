<?php
/**
 * UpdateAPayrollItemRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateAPayrollItemRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateAPayrollItemRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'update_a_payroll_item_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payroll' => 'string',
        'payment_method' => 'string',
        'earnings' => '\OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerEarningsInner[]',
        'reimbursements' => '\OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerReimbursementsInner[]',
        'benefit_overrides' => '\OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerBenefitOverridesInner[]',
        'post_tax_deduction_overrides' => '\OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerPostTaxDeductionOverridesInner[]',
        'pto_balance_hours' => 'float',
        'sick_balance_hours' => 'float',
        'state_covid_sick_balance_hours' => 'float',
        'supplemental_tax_calc_method' => 'string',
        'paper_check_number' => 'string',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payroll' => null,
        'payment_method' => null,
        'earnings' => null,
        'reimbursements' => null,
        'benefit_overrides' => null,
        'post_tax_deduction_overrides' => null,
        'pto_balance_hours' => 'float',
        'sick_balance_hours' => 'float',
        'state_covid_sick_balance_hours' => 'float',
        'supplemental_tax_calc_method' => null,
        'paper_check_number' => null,
        'metadata' => 'json'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payroll' => false,
        'payment_method' => false,
        'earnings' => false,
        'reimbursements' => false,
        'benefit_overrides' => false,
        'post_tax_deduction_overrides' => false,
        'pto_balance_hours' => false,
        'sick_balance_hours' => false,
        'state_covid_sick_balance_hours' => false,
        'supplemental_tax_calc_method' => false,
        'paper_check_number' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payroll' => 'payroll',
        'payment_method' => 'payment_method',
        'earnings' => 'earnings',
        'reimbursements' => 'reimbursements',
        'benefit_overrides' => 'benefit_overrides',
        'post_tax_deduction_overrides' => 'post_tax_deduction_overrides',
        'pto_balance_hours' => 'pto_balance_hours',
        'sick_balance_hours' => 'sick_balance_hours',
        'state_covid_sick_balance_hours' => 'state_covid_sick_balance_hours',
        'supplemental_tax_calc_method' => 'supplemental_tax_calc_method',
        'paper_check_number' => 'paper_check_number',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payroll' => 'setPayroll',
        'payment_method' => 'setPaymentMethod',
        'earnings' => 'setEarnings',
        'reimbursements' => 'setReimbursements',
        'benefit_overrides' => 'setBenefitOverrides',
        'post_tax_deduction_overrides' => 'setPostTaxDeductionOverrides',
        'pto_balance_hours' => 'setPtoBalanceHours',
        'sick_balance_hours' => 'setSickBalanceHours',
        'state_covid_sick_balance_hours' => 'setStateCovidSickBalanceHours',
        'supplemental_tax_calc_method' => 'setSupplementalTaxCalcMethod',
        'paper_check_number' => 'setPaperCheckNumber',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payroll' => 'getPayroll',
        'payment_method' => 'getPaymentMethod',
        'earnings' => 'getEarnings',
        'reimbursements' => 'getReimbursements',
        'benefit_overrides' => 'getBenefitOverrides',
        'post_tax_deduction_overrides' => 'getPostTaxDeductionOverrides',
        'pto_balance_hours' => 'getPtoBalanceHours',
        'sick_balance_hours' => 'getSickBalanceHours',
        'state_covid_sick_balance_hours' => 'getStateCovidSickBalanceHours',
        'supplemental_tax_calc_method' => 'getSupplementalTaxCalcMethod',
        'paper_check_number' => 'getPaperCheckNumber',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payroll', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('earnings', $data ?? [], null);
        $this->setIfExists('reimbursements', $data ?? [], null);
        $this->setIfExists('benefit_overrides', $data ?? [], null);
        $this->setIfExists('post_tax_deduction_overrides', $data ?? [], null);
        $this->setIfExists('pto_balance_hours', $data ?? [], null);
        $this->setIfExists('sick_balance_hours', $data ?? [], null);
        $this->setIfExists('state_covid_sick_balance_hours', $data ?? [], null);
        $this->setIfExists('supplemental_tax_calc_method', $data ?? [], null);
        $this->setIfExists('paper_check_number', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payroll
     *
     * @return string|null
     */
    public function getPayroll()
    {
        return $this->container['payroll'];
    }

    /**
     * Sets payroll
     *
     * @param string|null $payroll The payroll ID associated with the payroll item.
     *
     * @return self
     */
    public function setPayroll($payroll)
    {
        if (is_null($payroll)) {
            throw new \InvalidArgumentException('non-nullable payroll cannot be null');
        }
        $this->container['payroll'] = $payroll;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method May be `manual`, or `direct_deposit` if the employee has a linked bank account. `direct_deposit` if the employee has a linked Plaid account.
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerEarningsInner[]|null
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerEarningsInner[]|null $earnings The set of earnings objects associated with the payroll item.
     *
     * @return self
     */
    public function setEarnings($earnings)
    {
        if (is_null($earnings)) {
            throw new \InvalidArgumentException('non-nullable earnings cannot be null');
        }
        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets reimbursements
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerReimbursementsInner[]|null
     */
    public function getReimbursements()
    {
        return $this->container['reimbursements'];
    }

    /**
     * Sets reimbursements
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerReimbursementsInner[]|null $reimbursements The set of non-taxable reimbursements objects associated with the payroll item.
     *
     * @return self
     */
    public function setReimbursements($reimbursements)
    {
        if (is_null($reimbursements)) {
            throw new \InvalidArgumentException('non-nullable reimbursements cannot be null');
        }
        $this->container['reimbursements'] = $reimbursements;

        return $this;
    }

    /**
     * Gets benefit_overrides
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerBenefitOverridesInner[]|null
     */
    public function getBenefitOverrides()
    {
        return $this->container['benefit_overrides'];
    }

    /**
     * Sets benefit_overrides
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerBenefitOverridesInner[]|null $benefit_overrides The set of benefit override objects associated with this payroll item.
     *
     * @return self
     */
    public function setBenefitOverrides($benefit_overrides)
    {
        if (is_null($benefit_overrides)) {
            throw new \InvalidArgumentException('non-nullable benefit_overrides cannot be null');
        }
        $this->container['benefit_overrides'] = $benefit_overrides;

        return $this;
    }

    /**
     * Gets post_tax_deduction_overrides
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerPostTaxDeductionOverridesInner[]|null
     */
    public function getPostTaxDeductionOverrides()
    {
        return $this->container['post_tax_deduction_overrides'];
    }

    /**
     * Sets post_tax_deduction_overrides
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestItemsInnerPostTaxDeductionOverridesInner[]|null $post_tax_deduction_overrides The set of benefit override objects associated with this payroll item.
     *
     * @return self
     */
    public function setPostTaxDeductionOverrides($post_tax_deduction_overrides)
    {
        if (is_null($post_tax_deduction_overrides)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deduction_overrides cannot be null');
        }
        $this->container['post_tax_deduction_overrides'] = $post_tax_deduction_overrides;

        return $this;
    }

    /**
     * Gets pto_balance_hours
     *
     * @return float|null
     */
    public function getPtoBalanceHours()
    {
        return $this->container['pto_balance_hours'];
    }

    /**
     * Sets pto_balance_hours
     *
     * @param float|null $pto_balance_hours The employee's remaining PTO hour balance, for display on the paystub. Can be updated even after the associated payroll has been approved.
     *
     * @return self
     */
    public function setPtoBalanceHours($pto_balance_hours)
    {
        if (is_null($pto_balance_hours)) {
            throw new \InvalidArgumentException('non-nullable pto_balance_hours cannot be null');
        }
        $this->container['pto_balance_hours'] = $pto_balance_hours;

        return $this;
    }

    /**
     * Gets sick_balance_hours
     *
     * @return float|null
     */
    public function getSickBalanceHours()
    {
        return $this->container['sick_balance_hours'];
    }

    /**
     * Sets sick_balance_hours
     *
     * @param float|null $sick_balance_hours The employee's remaining sick hour balance, for display on the paystub. Can be updated even after the associated payroll has been approved.
     *
     * @return self
     */
    public function setSickBalanceHours($sick_balance_hours)
    {
        if (is_null($sick_balance_hours)) {
            throw new \InvalidArgumentException('non-nullable sick_balance_hours cannot be null');
        }
        $this->container['sick_balance_hours'] = $sick_balance_hours;

        return $this;
    }

    /**
     * Gets state_covid_sick_balance_hours
     *
     * @return float|null
     */
    public function getStateCovidSickBalanceHours()
    {
        return $this->container['state_covid_sick_balance_hours'];
    }

    /**
     * Sets state_covid_sick_balance_hours
     *
     * @param float|null $state_covid_sick_balance_hours The employee's remaining sick hour balance from state COVID relief bills, for display on the paystub
     *
     * @return self
     */
    public function setStateCovidSickBalanceHours($state_covid_sick_balance_hours)
    {
        if (is_null($state_covid_sick_balance_hours)) {
            throw new \InvalidArgumentException('non-nullable state_covid_sick_balance_hours cannot be null');
        }
        $this->container['state_covid_sick_balance_hours'] = $state_covid_sick_balance_hours;

        return $this;
    }

    /**
     * Gets supplemental_tax_calc_method
     *
     * @return string|null
     */
    public function getSupplementalTaxCalcMethod()
    {
        return $this->container['supplemental_tax_calc_method'];
    }

    /**
     * Sets supplemental_tax_calc_method
     *
     * @param string|null $supplemental_tax_calc_method Controls the method used by Check to calculate tax on supplemental earnings. May be `flat` or `aggregate`
     *
     * @return self
     */
    public function setSupplementalTaxCalcMethod($supplemental_tax_calc_method)
    {
        if (is_null($supplemental_tax_calc_method)) {
            throw new \InvalidArgumentException('non-nullable supplemental_tax_calc_method cannot be null');
        }
        $this->container['supplemental_tax_calc_method'] = $supplemental_tax_calc_method;

        return $this;
    }

    /**
     * Gets paper_check_number
     *
     * @return string|null
     */
    public function getPaperCheckNumber()
    {
        return $this->container['paper_check_number'];
    }

    /**
     * Sets paper_check_number
     *
     * @param string|null $paper_check_number For accounting. The check number associated with any printed checks. Can be updated even after the associated payroll has been approved. See [Get a paper check](ref:get-a-paper-check) for more details.
     *
     * @return self
     */
    public function setPaperCheckNumber($paper_check_number)
    {
        if (is_null($paper_check_number)) {
            throw new \InvalidArgumentException('non-nullable paper_check_number cannot be null');
        }
        $this->container['paper_check_number'] = $paper_check_number;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional loosely structured information to associate with the payroll item
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


