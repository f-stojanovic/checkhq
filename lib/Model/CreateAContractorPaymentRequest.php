<?php
/**
 * CreateAContractorPaymentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateAContractorPaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateAContractorPaymentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_a_contractor_payment_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contractor' => 'string',
        'payroll' => 'string',
        'payment_method' => 'string',
        'amount' => 'string',
        'reimbursement_amount' => 'string',
        'workplace' => 'string',
        'metadata' => 'string',
        'paper_check_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contractor' => null,
        'payroll' => null,
        'payment_method' => null,
        'amount' => null,
        'reimbursement_amount' => null,
        'workplace' => null,
        'metadata' => 'json',
        'paper_check_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contractor' => false,
        'payroll' => false,
        'payment_method' => false,
        'amount' => false,
        'reimbursement_amount' => false,
        'workplace' => false,
        'metadata' => false,
        'paper_check_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contractor' => 'contractor',
        'payroll' => 'payroll',
        'payment_method' => 'payment_method',
        'amount' => 'amount',
        'reimbursement_amount' => 'reimbursement_amount',
        'workplace' => 'workplace',
        'metadata' => 'metadata',
        'paper_check_number' => 'paper_check_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contractor' => 'setContractor',
        'payroll' => 'setPayroll',
        'payment_method' => 'setPaymentMethod',
        'amount' => 'setAmount',
        'reimbursement_amount' => 'setReimbursementAmount',
        'workplace' => 'setWorkplace',
        'metadata' => 'setMetadata',
        'paper_check_number' => 'setPaperCheckNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contractor' => 'getContractor',
        'payroll' => 'getPayroll',
        'payment_method' => 'getPaymentMethod',
        'amount' => 'getAmount',
        'reimbursement_amount' => 'getReimbursementAmount',
        'workplace' => 'getWorkplace',
        'metadata' => 'getMetadata',
        'paper_check_number' => 'getPaperCheckNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contractor', $data ?? [], null);
        $this->setIfExists('payroll', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], 'direct_deposit');
        $this->setIfExists('amount', $data ?? [], '0.00');
        $this->setIfExists('reimbursement_amount', $data ?? [], '0.00');
        $this->setIfExists('workplace', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('paper_check_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contractor'] === null) {
            $invalidProperties[] = "'contractor' can't be null";
        }
        if ($this->container['payroll'] === null) {
            $invalidProperties[] = "'payroll' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contractor
     *
     * @return string
     */
    public function getContractor()
    {
        return $this->container['contractor'];
    }

    /**
     * Sets contractor
     *
     * @param string $contractor ID of the contractor to pay
     *
     * @return self
     */
    public function setContractor($contractor)
    {
        if (is_null($contractor)) {
            throw new \InvalidArgumentException('non-nullable contractor cannot be null');
        }
        $this->container['contractor'] = $contractor;

        return $this;
    }

    /**
     * Gets payroll
     *
     * @return string
     */
    public function getPayroll()
    {
        return $this->container['payroll'];
    }

    /**
     * Sets payroll
     *
     * @param string $payroll ID of the payroll this contractor payment will be paid out on
     *
     * @return self
     */
    public function setPayroll($payroll)
    {
        if (is_null($payroll)) {
            throw new \InvalidArgumentException('non-nullable payroll cannot be null');
        }
        $this->container['payroll'] = $payroll;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method The way the contractor will be paid, either “direct_deposit” or \"manual\"
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The amount the contractor will be paid
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reimbursement_amount
     *
     * @return string|null
     */
    public function getReimbursementAmount()
    {
        return $this->container['reimbursement_amount'];
    }

    /**
     * Sets reimbursement_amount
     *
     * @param string|null $reimbursement_amount The amount to reimburse the contractor
     *
     * @return self
     */
    public function setReimbursementAmount($reimbursement_amount)
    {
        if (is_null($reimbursement_amount)) {
            throw new \InvalidArgumentException('non-nullable reimbursement_amount cannot be null');
        }
        $this->container['reimbursement_amount'] = $reimbursement_amount;

        return $this;
    }

    /**
     * Gets workplace
     *
     * @return string|null
     */
    public function getWorkplace()
    {
        return $this->container['workplace'];
    }

    /**
     * Sets workplace
     *
     * @param string|null $workplace The Workplace ID associated with this payment.
     *
     * @return self
     */
    public function setWorkplace($workplace)
    {
        if (is_null($workplace)) {
            throw new \InvalidArgumentException('non-nullable workplace cannot be null');
        }
        $this->container['workplace'] = $workplace;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional loosely structured information to associate with this contractor payment
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets paper_check_number
     *
     * @return string|null
     */
    public function getPaperCheckNumber()
    {
        return $this->container['paper_check_number'];
    }

    /**
     * Sets paper_check_number
     *
     * @param string|null $paper_check_number For accounting. The check number associated with any printed checks. Can be updated even after the associated payroll has been approved. See [Get a paper check](ref:get-a-paper-check-2) for more details.
     *
     * @return self
     */
    public function setPaperCheckNumber($paper_check_number)
    {
        if (is_null($paper_check_number)) {
            throw new \InvalidArgumentException('non-nullable paper_check_number cannot be null');
        }
        $this->container['paper_check_number'] = $paper_check_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


