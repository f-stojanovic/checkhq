<?php
/**
 * UpdatePayrollRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdatePayrollRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdatePayrollRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'update_payroll_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'period_start' => '\DateTime',
        'period_end' => '\DateTime',
        'payday' => '\DateTime',
        'processing_period' => 'string',
        'type' => 'string',
        'pay_frequency' => 'string',
        'funding_payment_method' => 'string',
        'pay_schedule' => 'string',
        'off_cycle_options' => '\OpenAPI\Client\Model\UpdatePayrollRequestOffCycleOptions',
        'items' => '\OpenAPI\Client\Model\UpdatePayrollRequestItemsInner[]',
        'contractor_payments' => '\OpenAPI\Client\Model\UpdatePayrollRequestContractorPaymentsInner[]',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'period_start' => 'date',
        'period_end' => 'date',
        'payday' => 'date',
        'processing_period' => null,
        'type' => null,
        'pay_frequency' => null,
        'funding_payment_method' => null,
        'pay_schedule' => null,
        'off_cycle_options' => null,
        'items' => null,
        'contractor_payments' => null,
        'metadata' => 'json'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'period_start' => false,
        'period_end' => false,
        'payday' => false,
        'processing_period' => false,
        'type' => false,
        'pay_frequency' => false,
        'funding_payment_method' => false,
        'pay_schedule' => false,
        'off_cycle_options' => false,
        'items' => false,
        'contractor_payments' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'payday' => 'payday',
        'processing_period' => 'processing_period',
        'type' => 'type',
        'pay_frequency' => 'pay_frequency',
        'funding_payment_method' => 'funding_payment_method',
        'pay_schedule' => 'pay_schedule',
        'off_cycle_options' => 'off_cycle_options',
        'items' => 'items',
        'contractor_payments' => 'contractor_payments',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'payday' => 'setPayday',
        'processing_period' => 'setProcessingPeriod',
        'type' => 'setType',
        'pay_frequency' => 'setPayFrequency',
        'funding_payment_method' => 'setFundingPaymentMethod',
        'pay_schedule' => 'setPaySchedule',
        'off_cycle_options' => 'setOffCycleOptions',
        'items' => 'setItems',
        'contractor_payments' => 'setContractorPayments',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'payday' => 'getPayday',
        'processing_period' => 'getProcessingPeriod',
        'type' => 'getType',
        'pay_frequency' => 'getPayFrequency',
        'funding_payment_method' => 'getFundingPaymentMethod',
        'pay_schedule' => 'getPaySchedule',
        'off_cycle_options' => 'getOffCycleOptions',
        'items' => 'getItems',
        'contractor_payments' => 'getContractorPayments',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('period_start', $data ?? [], null);
        $this->setIfExists('period_end', $data ?? [], null);
        $this->setIfExists('payday', $data ?? [], null);
        $this->setIfExists('processing_period', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('pay_frequency', $data ?? [], null);
        $this->setIfExists('funding_payment_method', $data ?? [], null);
        $this->setIfExists('pay_schedule', $data ?? [], null);
        $this->setIfExists('off_cycle_options', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('contractor_payments', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets period_start
     *
     * @return \DateTime|null
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param \DateTime|null $period_start The start of the date range that the payroll covers.
     *
     * @return self
     */
    public function setPeriodStart($period_start)
    {
        if (is_null($period_start)) {
            throw new \InvalidArgumentException('non-nullable period_start cannot be null');
        }
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return \DateTime|null
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param \DateTime|null $period_end The end of the date range that the payroll covers.
     *
     * @return self
     */
    public function setPeriodEnd($period_end)
    {
        if (is_null($period_end)) {
            throw new \InvalidArgumentException('non-nullable period_end cannot be null');
        }
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets payday
     *
     * @return \DateTime|null
     */
    public function getPayday()
    {
        return $this->container['payday'];
    }

    /**
     * Sets payday
     *
     * @param \DateTime|null $payday The date on which employees will be paid for the payroll.
     *
     * @return self
     */
    public function setPayday($payday)
    {
        if (is_null($payday)) {
            throw new \InvalidArgumentException('non-nullable payday cannot be null');
        }
        $this->container['payday'] = $payday;

        return $this;
    }

    /**
     * Gets processing_period
     *
     * @return string|null
     */
    public function getProcessingPeriod()
    {
        return $this->container['processing_period'];
    }

    /**
     * Sets processing_period
     *
     * @param string|null $processing_period The processing period of the payroll. <br><br>One of `four_day`, `two_day`, or `one_day`.<br><br>The processing period determines the approval deadline of the payroll. For a payroll with a Friday payday, `four_day` will mean the approval deadline is on Monday, whereas `two_day` will mean the approval deadline is on Wednesday.<br><br>The possible values for this field are constrained by the processing periods the company is approved for.<br><br>Default: `processing_period` of the company
     *
     * @return self
     */
    public function setProcessingPeriod($processing_period)
    {
        if (is_null($processing_period)) {
            throw new \InvalidArgumentException('non-nullable processing_period cannot be null');
        }
        $this->container['processing_period'] = $processing_period;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Indicates whether the payroll is a regular, [off-cycle](doc:off-cycle-payroll), or amendment payroll.<br><br>One of `regular`, `off_cycle`, or `amendment`.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pay_frequency
     *
     * @return string|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param string|null $pay_frequency Frequency by which [employees](ref:the-employee-object) get paid.<br><br>One of `weekly`, `biweekly`, `semimonthly`, `monthly`, `quarterly`, or `annually`.
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        if (is_null($pay_frequency)) {
            throw new \InvalidArgumentException('non-nullable pay_frequency cannot be null');
        }
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets funding_payment_method
     *
     * @return string|null
     */
    public function getFundingPaymentMethod()
    {
        return $this->container['funding_payment_method'];
    }

    /**
     * Sets funding_payment_method
     *
     * @param string|null $funding_payment_method Payment method for funding the payroll. <br><br>One of `ach` or `wire`.
     *
     * @return self
     */
    public function setFundingPaymentMethod($funding_payment_method)
    {
        if (is_null($funding_payment_method)) {
            throw new \InvalidArgumentException('non-nullable funding_payment_method cannot be null');
        }
        $this->container['funding_payment_method'] = $funding_payment_method;

        return $this;
    }

    /**
     * Gets pay_schedule
     *
     * @return string|null
     */
    public function getPaySchedule()
    {
        return $this->container['pay_schedule'];
    }

    /**
     * Sets pay_schedule
     *
     * @param string|null $pay_schedule ID of the [pay schedule](ref:the-pay-schedule-object) that the payroll relates to.
     *
     * @return self
     */
    public function setPaySchedule($pay_schedule)
    {
        if (is_null($pay_schedule)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule cannot be null');
        }
        $this->container['pay_schedule'] = $pay_schedule;

        return $this;
    }

    /**
     * Gets off_cycle_options
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestOffCycleOptions|null
     */
    public function getOffCycleOptions()
    {
        return $this->container['off_cycle_options'];
    }

    /**
     * Sets off_cycle_options
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestOffCycleOptions|null $off_cycle_options off_cycle_options
     *
     * @return self
     */
    public function setOffCycleOptions($off_cycle_options)
    {
        if (is_null($off_cycle_options)) {
            throw new \InvalidArgumentException('non-nullable off_cycle_options cannot be null');
        }
        $this->container['off_cycle_options'] = $off_cycle_options;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestItemsInner[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestItemsInner[]|null $items The set of [payroll items](ref:the-payroll-item-object) associated with the payroll.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets contractor_payments
     *
     * @return \OpenAPI\Client\Model\UpdatePayrollRequestContractorPaymentsInner[]|null
     */
    public function getContractorPayments()
    {
        return $this->container['contractor_payments'];
    }

    /**
     * Sets contractor_payments
     *
     * @param \OpenAPI\Client\Model\UpdatePayrollRequestContractorPaymentsInner[]|null $contractor_payments The set of [contractor payments](ref:the-contractor-payment-object) associated with the payroll.
     *
     * @return self
     */
    public function setContractorPayments($contractor_payments)
    {
        if (is_null($contractor_payments)) {
            throw new \InvalidArgumentException('non-nullable contractor_payments cannot be null');
        }
        $this->container['contractor_payments'] = $contractor_payments;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional loosely structured information to associate with the payroll. Values must be string.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


