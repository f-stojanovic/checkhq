<?php
/**
 * ListEmployeeTaxElections200ResponseResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListEmployeeTaxElections200ResponseResultsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListEmployeeTaxElections200ResponseResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'list_employee_tax_elections_200_response_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'tax' => 'string',
        'description' => 'string',
        'payer' => 'string',
        'company' => 'string',
        'employee' => 'string',
        'jurisdiction' => 'string',
        'jurisdiction_abbreviation' => 'string',
        'exemptible' => 'bool',
        'setting' => 'mixed',
        'setting_timeline' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'tax' => null,
        'description' => null,
        'payer' => null,
        'company' => null,
        'employee' => null,
        'jurisdiction' => null,
        'jurisdiction_abbreviation' => null,
        'exemptible' => null,
        'setting' => null,
        'setting_timeline' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'tax' => false,
        'description' => false,
        'payer' => false,
        'company' => false,
        'employee' => false,
        'jurisdiction' => false,
        'jurisdiction_abbreviation' => false,
        'exemptible' => false,
        'setting' => true,
        'setting_timeline' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'tax' => 'tax',
        'description' => 'description',
        'payer' => 'payer',
        'company' => 'company',
        'employee' => 'employee',
        'jurisdiction' => 'jurisdiction',
        'jurisdiction_abbreviation' => 'jurisdiction_abbreviation',
        'exemptible' => 'exemptible',
        'setting' => 'setting',
        'setting_timeline' => 'setting_timeline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'tax' => 'setTax',
        'description' => 'setDescription',
        'payer' => 'setPayer',
        'company' => 'setCompany',
        'employee' => 'setEmployee',
        'jurisdiction' => 'setJurisdiction',
        'jurisdiction_abbreviation' => 'setJurisdictionAbbreviation',
        'exemptible' => 'setExemptible',
        'setting' => 'setSetting',
        'setting_timeline' => 'setSettingTimeline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'tax' => 'getTax',
        'description' => 'getDescription',
        'payer' => 'getPayer',
        'company' => 'getCompany',
        'employee' => 'getEmployee',
        'jurisdiction' => 'getJurisdiction',
        'jurisdiction_abbreviation' => 'getJurisdictionAbbreviation',
        'exemptible' => 'getExemptible',
        'setting' => 'getSetting',
        'setting_timeline' => 'getSettingTimeline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('jurisdiction', $data ?? [], null);
        $this->setIfExists('jurisdiction_abbreviation', $data ?? [], null);
        $this->setIfExists('exemptible', $data ?? [], true);
        $this->setIfExists('setting', $data ?? [], null);
        $this->setIfExists('setting_timeline', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string|null $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return string|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param string|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets jurisdiction
     *
     * @return string|null
     */
    public function getJurisdiction()
    {
        return $this->container['jurisdiction'];
    }

    /**
     * Sets jurisdiction
     *
     * @param string|null $jurisdiction jurisdiction
     *
     * @return self
     */
    public function setJurisdiction($jurisdiction)
    {
        if (is_null($jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction cannot be null');
        }
        $this->container['jurisdiction'] = $jurisdiction;

        return $this;
    }

    /**
     * Gets jurisdiction_abbreviation
     *
     * @return string|null
     */
    public function getJurisdictionAbbreviation()
    {
        return $this->container['jurisdiction_abbreviation'];
    }

    /**
     * Sets jurisdiction_abbreviation
     *
     * @param string|null $jurisdiction_abbreviation jurisdiction_abbreviation
     *
     * @return self
     */
    public function setJurisdictionAbbreviation($jurisdiction_abbreviation)
    {
        if (is_null($jurisdiction_abbreviation)) {
            throw new \InvalidArgumentException('non-nullable jurisdiction_abbreviation cannot be null');
        }
        $this->container['jurisdiction_abbreviation'] = $jurisdiction_abbreviation;

        return $this;
    }

    /**
     * Gets exemptible
     *
     * @return bool|null
     */
    public function getExemptible()
    {
        return $this->container['exemptible'];
    }

    /**
     * Sets exemptible
     *
     * @param bool|null $exemptible exemptible
     *
     * @return self
     */
    public function setExemptible($exemptible)
    {
        if (is_null($exemptible)) {
            throw new \InvalidArgumentException('non-nullable exemptible cannot be null');
        }
        $this->container['exemptible'] = $exemptible;

        return $this;
    }

    /**
     * Gets setting
     *
     * @return mixed|null
     */
    public function getSetting()
    {
        return $this->container['setting'];
    }

    /**
     * Sets setting
     *
     * @param mixed|null $setting setting
     *
     * @return self
     */
    public function setSetting($setting)
    {
        if (is_null($setting)) {
            array_push($this->openAPINullablesSetToNull, 'setting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('setting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['setting'] = $setting;

        return $this;
    }

    /**
     * Gets setting_timeline
     *
     * @return mixed[]|null
     */
    public function getSettingTimeline()
    {
        return $this->container['setting_timeline'];
    }

    /**
     * Sets setting_timeline
     *
     * @param mixed[]|null $setting_timeline setting_timeline
     *
     * @return self
     */
    public function setSettingTimeline($setting_timeline)
    {
        if (is_null($setting_timeline)) {
            throw new \InvalidArgumentException('non-nullable setting_timeline cannot be null');
        }
        $this->container['setting_timeline'] = $setting_timeline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


