<?php
/**
 * GetPayroll200ResponseTotals
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetPayroll200ResponseTotals Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetPayroll200ResponseTotals implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_payroll_200_response_totals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_gross' => 'string',
        'employee_reimbursements' => 'string',
        'employee_taxes' => 'string',
        'employee_benefits' => 'string',
        'post_tax_deductions' => 'string',
        'employee_net' => 'string',
        'contractor_gross' => 'string',
        'contractor_reimbursements' => 'string',
        'contractor_net' => 'string',
        'company_taxes' => 'string',
        'company_benefits' => 'string',
        'liability' => 'string',
        'cash_requirement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_gross' => null,
        'employee_reimbursements' => null,
        'employee_taxes' => null,
        'employee_benefits' => null,
        'post_tax_deductions' => null,
        'employee_net' => null,
        'contractor_gross' => null,
        'contractor_reimbursements' => null,
        'contractor_net' => null,
        'company_taxes' => null,
        'company_benefits' => null,
        'liability' => null,
        'cash_requirement' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_gross' => false,
        'employee_reimbursements' => false,
        'employee_taxes' => false,
        'employee_benefits' => false,
        'post_tax_deductions' => false,
        'employee_net' => false,
        'contractor_gross' => false,
        'contractor_reimbursements' => false,
        'contractor_net' => false,
        'company_taxes' => false,
        'company_benefits' => false,
        'liability' => false,
        'cash_requirement' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_gross' => 'employee_gross',
        'employee_reimbursements' => 'employee_reimbursements',
        'employee_taxes' => 'employee_taxes',
        'employee_benefits' => 'employee_benefits',
        'post_tax_deductions' => 'post_tax_deductions',
        'employee_net' => 'employee_net',
        'contractor_gross' => 'contractor_gross',
        'contractor_reimbursements' => 'contractor_reimbursements',
        'contractor_net' => 'contractor_net',
        'company_taxes' => 'company_taxes',
        'company_benefits' => 'company_benefits',
        'liability' => 'liability',
        'cash_requirement' => 'cash_requirement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_gross' => 'setEmployeeGross',
        'employee_reimbursements' => 'setEmployeeReimbursements',
        'employee_taxes' => 'setEmployeeTaxes',
        'employee_benefits' => 'setEmployeeBenefits',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'employee_net' => 'setEmployeeNet',
        'contractor_gross' => 'setContractorGross',
        'contractor_reimbursements' => 'setContractorReimbursements',
        'contractor_net' => 'setContractorNet',
        'company_taxes' => 'setCompanyTaxes',
        'company_benefits' => 'setCompanyBenefits',
        'liability' => 'setLiability',
        'cash_requirement' => 'setCashRequirement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_gross' => 'getEmployeeGross',
        'employee_reimbursements' => 'getEmployeeReimbursements',
        'employee_taxes' => 'getEmployeeTaxes',
        'employee_benefits' => 'getEmployeeBenefits',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'employee_net' => 'getEmployeeNet',
        'contractor_gross' => 'getContractorGross',
        'contractor_reimbursements' => 'getContractorReimbursements',
        'contractor_net' => 'getContractorNet',
        'company_taxes' => 'getCompanyTaxes',
        'company_benefits' => 'getCompanyBenefits',
        'liability' => 'getLiability',
        'cash_requirement' => 'getCashRequirement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('employee_gross', $data ?? [], null);
        $this->setIfExists('employee_reimbursements', $data ?? [], null);
        $this->setIfExists('employee_taxes', $data ?? [], null);
        $this->setIfExists('employee_benefits', $data ?? [], null);
        $this->setIfExists('post_tax_deductions', $data ?? [], null);
        $this->setIfExists('employee_net', $data ?? [], null);
        $this->setIfExists('contractor_gross', $data ?? [], null);
        $this->setIfExists('contractor_reimbursements', $data ?? [], null);
        $this->setIfExists('contractor_net', $data ?? [], null);
        $this->setIfExists('company_taxes', $data ?? [], null);
        $this->setIfExists('company_benefits', $data ?? [], null);
        $this->setIfExists('liability', $data ?? [], null);
        $this->setIfExists('cash_requirement', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_gross
     *
     * @return string|null
     */
    public function getEmployeeGross()
    {
        return $this->container['employee_gross'];
    }

    /**
     * Sets employee_gross
     *
     * @param string|null $employee_gross employee_gross
     *
     * @return self
     */
    public function setEmployeeGross($employee_gross)
    {
        if (is_null($employee_gross)) {
            throw new \InvalidArgumentException('non-nullable employee_gross cannot be null');
        }
        $this->container['employee_gross'] = $employee_gross;

        return $this;
    }

    /**
     * Gets employee_reimbursements
     *
     * @return string|null
     */
    public function getEmployeeReimbursements()
    {
        return $this->container['employee_reimbursements'];
    }

    /**
     * Sets employee_reimbursements
     *
     * @param string|null $employee_reimbursements employee_reimbursements
     *
     * @return self
     */
    public function setEmployeeReimbursements($employee_reimbursements)
    {
        if (is_null($employee_reimbursements)) {
            throw new \InvalidArgumentException('non-nullable employee_reimbursements cannot be null');
        }
        $this->container['employee_reimbursements'] = $employee_reimbursements;

        return $this;
    }

    /**
     * Gets employee_taxes
     *
     * @return string|null
     */
    public function getEmployeeTaxes()
    {
        return $this->container['employee_taxes'];
    }

    /**
     * Sets employee_taxes
     *
     * @param string|null $employee_taxes employee_taxes
     *
     * @return self
     */
    public function setEmployeeTaxes($employee_taxes)
    {
        if (is_null($employee_taxes)) {
            throw new \InvalidArgumentException('non-nullable employee_taxes cannot be null');
        }
        $this->container['employee_taxes'] = $employee_taxes;

        return $this;
    }

    /**
     * Gets employee_benefits
     *
     * @return string|null
     */
    public function getEmployeeBenefits()
    {
        return $this->container['employee_benefits'];
    }

    /**
     * Sets employee_benefits
     *
     * @param string|null $employee_benefits employee_benefits
     *
     * @return self
     */
    public function setEmployeeBenefits($employee_benefits)
    {
        if (is_null($employee_benefits)) {
            throw new \InvalidArgumentException('non-nullable employee_benefits cannot be null');
        }
        $this->container['employee_benefits'] = $employee_benefits;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return string|null
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param string|null $post_tax_deductions post_tax_deductions
     *
     * @return self
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        if (is_null($post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions cannot be null');
        }
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets employee_net
     *
     * @return string|null
     */
    public function getEmployeeNet()
    {
        return $this->container['employee_net'];
    }

    /**
     * Sets employee_net
     *
     * @param string|null $employee_net employee_net
     *
     * @return self
     */
    public function setEmployeeNet($employee_net)
    {
        if (is_null($employee_net)) {
            throw new \InvalidArgumentException('non-nullable employee_net cannot be null');
        }
        $this->container['employee_net'] = $employee_net;

        return $this;
    }

    /**
     * Gets contractor_gross
     *
     * @return string|null
     */
    public function getContractorGross()
    {
        return $this->container['contractor_gross'];
    }

    /**
     * Sets contractor_gross
     *
     * @param string|null $contractor_gross contractor_gross
     *
     * @return self
     */
    public function setContractorGross($contractor_gross)
    {
        if (is_null($contractor_gross)) {
            throw new \InvalidArgumentException('non-nullable contractor_gross cannot be null');
        }
        $this->container['contractor_gross'] = $contractor_gross;

        return $this;
    }

    /**
     * Gets contractor_reimbursements
     *
     * @return string|null
     */
    public function getContractorReimbursements()
    {
        return $this->container['contractor_reimbursements'];
    }

    /**
     * Sets contractor_reimbursements
     *
     * @param string|null $contractor_reimbursements contractor_reimbursements
     *
     * @return self
     */
    public function setContractorReimbursements($contractor_reimbursements)
    {
        if (is_null($contractor_reimbursements)) {
            throw new \InvalidArgumentException('non-nullable contractor_reimbursements cannot be null');
        }
        $this->container['contractor_reimbursements'] = $contractor_reimbursements;

        return $this;
    }

    /**
     * Gets contractor_net
     *
     * @return string|null
     */
    public function getContractorNet()
    {
        return $this->container['contractor_net'];
    }

    /**
     * Sets contractor_net
     *
     * @param string|null $contractor_net contractor_net
     *
     * @return self
     */
    public function setContractorNet($contractor_net)
    {
        if (is_null($contractor_net)) {
            throw new \InvalidArgumentException('non-nullable contractor_net cannot be null');
        }
        $this->container['contractor_net'] = $contractor_net;

        return $this;
    }

    /**
     * Gets company_taxes
     *
     * @return string|null
     */
    public function getCompanyTaxes()
    {
        return $this->container['company_taxes'];
    }

    /**
     * Sets company_taxes
     *
     * @param string|null $company_taxes company_taxes
     *
     * @return self
     */
    public function setCompanyTaxes($company_taxes)
    {
        if (is_null($company_taxes)) {
            throw new \InvalidArgumentException('non-nullable company_taxes cannot be null');
        }
        $this->container['company_taxes'] = $company_taxes;

        return $this;
    }

    /**
     * Gets company_benefits
     *
     * @return string|null
     */
    public function getCompanyBenefits()
    {
        return $this->container['company_benefits'];
    }

    /**
     * Sets company_benefits
     *
     * @param string|null $company_benefits company_benefits
     *
     * @return self
     */
    public function setCompanyBenefits($company_benefits)
    {
        if (is_null($company_benefits)) {
            throw new \InvalidArgumentException('non-nullable company_benefits cannot be null');
        }
        $this->container['company_benefits'] = $company_benefits;

        return $this;
    }

    /**
     * Gets liability
     *
     * @return string|null
     */
    public function getLiability()
    {
        return $this->container['liability'];
    }

    /**
     * Sets liability
     *
     * @param string|null $liability liability
     *
     * @return self
     */
    public function setLiability($liability)
    {
        if (is_null($liability)) {
            throw new \InvalidArgumentException('non-nullable liability cannot be null');
        }
        $this->container['liability'] = $liability;

        return $this;
    }

    /**
     * Gets cash_requirement
     *
     * @return string|null
     */
    public function getCashRequirement()
    {
        return $this->container['cash_requirement'];
    }

    /**
     * Sets cash_requirement
     *
     * @param string|null $cash_requirement cash_requirement
     *
     * @return self
     */
    public function setCashRequirement($cash_requirement)
    {
        if (is_null($cash_requirement)) {
            throw new \InvalidArgumentException('non-nullable cash_requirement cannot be null');
        }
        $this->container['cash_requirement'] = $cash_requirement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


