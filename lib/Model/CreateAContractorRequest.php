<?php
/**
 * CreateAContractorRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateAContractorRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateAContractorRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'create_a_contractor_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company' => 'string',
        'type' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'business_name' => 'string',
        'dob' => '\DateTime',
        'start_date' => '\DateTime',
        'termination_date' => '\DateTime',
        'workplaces' => 'string[]',
        'primary_workplace' => 'string',
        'email' => 'string',
        'ssn' => 'string',
        'ein' => 'string',
        'default_net_pay_split' => 'string',
        'payment_method_preference' => 'string',
        'address' => '\OpenAPI\Client\Model\UpdateAContractorRequestAddress',
        '_1099_nec_electronic_consent_provided' => 'bool',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company' => null,
        'type' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'business_name' => null,
        'dob' => 'date',
        'start_date' => 'date',
        'termination_date' => 'date',
        'workplaces' => null,
        'primary_workplace' => null,
        'email' => null,
        'ssn' => null,
        'ein' => null,
        'default_net_pay_split' => null,
        'payment_method_preference' => null,
        'address' => null,
        '_1099_nec_electronic_consent_provided' => null,
        'metadata' => 'json'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company' => false,
        'type' => false,
        'first_name' => false,
        'middle_name' => false,
        'last_name' => false,
        'business_name' => false,
        'dob' => false,
        'start_date' => false,
        'termination_date' => false,
        'workplaces' => false,
        'primary_workplace' => false,
        'email' => false,
        'ssn' => false,
        'ein' => false,
        'default_net_pay_split' => false,
        'payment_method_preference' => false,
        'address' => false,
        '_1099_nec_electronic_consent_provided' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company' => 'company',
        'type' => 'type',
        'first_name' => 'first_name',
        'middle_name' => 'middle_name',
        'last_name' => 'last_name',
        'business_name' => 'business_name',
        'dob' => 'dob',
        'start_date' => 'start_date',
        'termination_date' => 'termination_date',
        'workplaces' => 'workplaces',
        'primary_workplace' => 'primary_workplace',
        'email' => 'email',
        'ssn' => 'ssn',
        'ein' => 'ein',
        'default_net_pay_split' => 'default_net_pay_split',
        'payment_method_preference' => 'payment_method_preference',
        'address' => 'address',
        '_1099_nec_electronic_consent_provided' => '1099_nec_electronic_consent_provided',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company' => 'setCompany',
        'type' => 'setType',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'business_name' => 'setBusinessName',
        'dob' => 'setDob',
        'start_date' => 'setStartDate',
        'termination_date' => 'setTerminationDate',
        'workplaces' => 'setWorkplaces',
        'primary_workplace' => 'setPrimaryWorkplace',
        'email' => 'setEmail',
        'ssn' => 'setSsn',
        'ein' => 'setEin',
        'default_net_pay_split' => 'setDefaultNetPaySplit',
        'payment_method_preference' => 'setPaymentMethodPreference',
        'address' => 'setAddress',
        '_1099_nec_electronic_consent_provided' => 'set1099NecElectronicConsentProvided',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company' => 'getCompany',
        'type' => 'getType',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'business_name' => 'getBusinessName',
        'dob' => 'getDob',
        'start_date' => 'getStartDate',
        'termination_date' => 'getTerminationDate',
        'workplaces' => 'getWorkplaces',
        'primary_workplace' => 'getPrimaryWorkplace',
        'email' => 'getEmail',
        'ssn' => 'getSsn',
        'ein' => 'getEin',
        'default_net_pay_split' => 'getDefaultNetPaySplit',
        'payment_method_preference' => 'getPaymentMethodPreference',
        'address' => 'getAddress',
        '_1099_nec_electronic_consent_provided' => 'get1099NecElectronicConsentProvided',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('termination_date', $data ?? [], null);
        $this->setIfExists('workplaces', $data ?? [], null);
        $this->setIfExists('primary_workplace', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('ein', $data ?? [], null);
        $this->setIfExists('default_net_pay_split', $data ?? [], null);
        $this->setIfExists('payment_method_preference', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('_1099_nec_electronic_consent_provided', $data ?? [], false);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company'] === null) {
            $invalidProperties[] = "'company' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company ID of the company the contractor performs work for
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type If the contractor is a person set to \"individual\", otherwise set to \"business\".
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Contractor's first name. If contractor type is business, a primary contact is needed for 1099 filing so use the first name of the business's primary contact.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Contractor's middle name. If contractor type is business, a primary contact is needed for 1099 filing so use the middle name of the business's primary contact.
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Contractor's last name. If contractor type is business, a primary contact is needed for 1099 filing so use the last name of the business's primary contact.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string|null
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string|null $business_name Contractor's business name if they're not an individual.
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob Contractor's date of birth
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Most recent start date of contract
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date Most recent termination date of contract. Will be set to null if a more recent start date is set.
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        if (is_null($termination_date)) {
            throw new \InvalidArgumentException('non-nullable termination_date cannot be null');
        }
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets workplaces
     *
     * @return string[]|null
     */
    public function getWorkplaces()
    {
        return $this->container['workplaces'];
    }

    /**
     * Sets workplaces
     *
     * @param string[]|null $workplaces IDs of workplaces where the contractor works
     *
     * @return self
     */
    public function setWorkplaces($workplaces)
    {
        if (is_null($workplaces)) {
            throw new \InvalidArgumentException('non-nullable workplaces cannot be null');
        }
        $this->container['workplaces'] = $workplaces;

        return $this;
    }

    /**
     * Gets primary_workplace
     *
     * @return string|null
     */
    public function getPrimaryWorkplace()
    {
        return $this->container['primary_workplace'];
    }

    /**
     * Sets primary_workplace
     *
     * @param string|null $primary_workplace The Workplace ID of the contractor's primary workplace.
     *
     * @return self
     */
    public function setPrimaryWorkplace($primary_workplace)
    {
        if (is_null($primary_workplace)) {
            throw new \InvalidArgumentException('non-nullable primary_workplace cannot be null');
        }
        $this->container['primary_workplace'] = $primary_workplace;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Contractor's email address
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn Contractor's TIN (usually their Social Security Number). Must be unique across all contractors in a company. Only the last four digits of an SSN will be made available in `ssn_last_four` after being set.
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (is_null($ssn)) {
            throw new \InvalidArgumentException('non-nullable ssn cannot be null');
        }
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein Contractor's Employer Identification Number, if applicable
     *
     * @return self
     */
    public function setEin($ein)
    {
        if (is_null($ein)) {
            throw new \InvalidArgumentException('non-nullable ein cannot be null');
        }
        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets default_net_pay_split
     *
     * @return string|null
     */
    public function getDefaultNetPaySplit()
    {
        return $this->container['default_net_pay_split'];
    }

    /**
     * Sets default_net_pay_split
     *
     * @param string|null $default_net_pay_split ID of contractor's net pay split
     *
     * @return self
     */
    public function setDefaultNetPaySplit($default_net_pay_split)
    {
        if (is_null($default_net_pay_split)) {
            throw new \InvalidArgumentException('non-nullable default_net_pay_split cannot be null');
        }
        $this->container['default_net_pay_split'] = $default_net_pay_split;

        return $this;
    }

    /**
     * Gets payment_method_preference
     *
     * @return string|null
     */
    public function getPaymentMethodPreference()
    {
        return $this->container['payment_method_preference'];
    }

    /**
     * Sets payment_method_preference
     *
     * @param string|null $payment_method_preference Either \"direct_deposit\" or \"manual\", default null
     *
     * @return self
     */
    public function setPaymentMethodPreference($payment_method_preference)
    {
        if (is_null($payment_method_preference)) {
            throw new \InvalidArgumentException('non-nullable payment_method_preference cannot be null');
        }
        $this->container['payment_method_preference'] = $payment_method_preference;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\UpdateAContractorRequestAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\UpdateAContractorRequestAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets _1099_nec_electronic_consent_provided
     *
     * @return bool|null
     */
    public function get1099NecElectronicConsentProvided()
    {
        return $this->container['_1099_nec_electronic_consent_provided'];
    }

    /**
     * Sets _1099_nec_electronic_consent_provided
     *
     * @param bool|null $_1099_nec_electronic_consent_provided Indicates whether the contractor has opted into electronic delivery of Copy B of 1099-NEC.
     *
     * @return self
     */
    public function set1099NecElectronicConsentProvided($_1099_nec_electronic_consent_provided)
    {
        if (is_null($_1099_nec_electronic_consent_provided)) {
            throw new \InvalidArgumentException('non-nullable _1099_nec_electronic_consent_provided cannot be null');
        }
        $this->container['_1099_nec_electronic_consent_provided'] = $_1099_nec_electronic_consent_provided;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Additional loosely structured information to associate with the contractor
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


