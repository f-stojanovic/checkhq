<?php
/**
 * GetPayroll200ResponseItemsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetPayroll200ResponseItemsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetPayroll200ResponseItemsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_payroll_200_response_items_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'payroll' => 'string',
        'employee' => 'string',
        'payment_method' => 'string',
        'net_pay' => 'string',
        'earnings' => '\OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerEarningsInner[]',
        'reimbursements' => 'mixed[]',
        'taxes' => '\OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerTaxesInner[]',
        'benefits' => 'mixed[]',
        'benefit_overrides' => 'mixed[]',
        'post_tax_deductions' => 'mixed[]',
        'post_tax_deduction_overrides' => 'mixed[]',
        'warnings' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'payroll' => null,
        'employee' => null,
        'payment_method' => null,
        'net_pay' => null,
        'earnings' => null,
        'reimbursements' => null,
        'taxes' => null,
        'benefits' => null,
        'benefit_overrides' => null,
        'post_tax_deductions' => null,
        'post_tax_deduction_overrides' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'payroll' => false,
        'employee' => false,
        'payment_method' => false,
        'net_pay' => false,
        'earnings' => false,
        'reimbursements' => false,
        'taxes' => false,
        'benefits' => false,
        'benefit_overrides' => false,
        'post_tax_deductions' => false,
        'post_tax_deduction_overrides' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'payroll' => 'payroll',
        'employee' => 'employee',
        'payment_method' => 'payment_method',
        'net_pay' => 'net_pay',
        'earnings' => 'earnings',
        'reimbursements' => 'reimbursements',
        'taxes' => 'taxes',
        'benefits' => 'benefits',
        'benefit_overrides' => 'benefit_overrides',
        'post_tax_deductions' => 'post_tax_deductions',
        'post_tax_deduction_overrides' => 'post_tax_deduction_overrides',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'payroll' => 'setPayroll',
        'employee' => 'setEmployee',
        'payment_method' => 'setPaymentMethod',
        'net_pay' => 'setNetPay',
        'earnings' => 'setEarnings',
        'reimbursements' => 'setReimbursements',
        'taxes' => 'setTaxes',
        'benefits' => 'setBenefits',
        'benefit_overrides' => 'setBenefitOverrides',
        'post_tax_deductions' => 'setPostTaxDeductions',
        'post_tax_deduction_overrides' => 'setPostTaxDeductionOverrides',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'payroll' => 'getPayroll',
        'employee' => 'getEmployee',
        'payment_method' => 'getPaymentMethod',
        'net_pay' => 'getNetPay',
        'earnings' => 'getEarnings',
        'reimbursements' => 'getReimbursements',
        'taxes' => 'getTaxes',
        'benefits' => 'getBenefits',
        'benefit_overrides' => 'getBenefitOverrides',
        'post_tax_deductions' => 'getPostTaxDeductions',
        'post_tax_deduction_overrides' => 'getPostTaxDeductionOverrides',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('payroll', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('net_pay', $data ?? [], null);
        $this->setIfExists('earnings', $data ?? [], null);
        $this->setIfExists('reimbursements', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('benefits', $data ?? [], null);
        $this->setIfExists('benefit_overrides', $data ?? [], null);
        $this->setIfExists('post_tax_deductions', $data ?? [], null);
        $this->setIfExists('post_tax_deduction_overrides', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payroll
     *
     * @return string|null
     */
    public function getPayroll()
    {
        return $this->container['payroll'];
    }

    /**
     * Sets payroll
     *
     * @param string|null $payroll payroll
     *
     * @return self
     */
    public function setPayroll($payroll)
    {
        if (is_null($payroll)) {
            throw new \InvalidArgumentException('non-nullable payroll cannot be null');
        }
        $this->container['payroll'] = $payroll;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return string|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param string|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return string|null
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param string|null $net_pay net_pay
     *
     * @return self
     */
    public function setNetPay($net_pay)
    {
        if (is_null($net_pay)) {
            throw new \InvalidArgumentException('non-nullable net_pay cannot be null');
        }
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return \OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerEarningsInner[]|null
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param \OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerEarningsInner[]|null $earnings earnings
     *
     * @return self
     */
    public function setEarnings($earnings)
    {
        if (is_null($earnings)) {
            throw new \InvalidArgumentException('non-nullable earnings cannot be null');
        }
        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets reimbursements
     *
     * @return mixed[]|null
     */
    public function getReimbursements()
    {
        return $this->container['reimbursements'];
    }

    /**
     * Sets reimbursements
     *
     * @param mixed[]|null $reimbursements reimbursements
     *
     * @return self
     */
    public function setReimbursements($reimbursements)
    {
        if (is_null($reimbursements)) {
            throw new \InvalidArgumentException('non-nullable reimbursements cannot be null');
        }
        $this->container['reimbursements'] = $reimbursements;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerTaxesInner[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Model\GetPayroll200ResponseItemsInnerTaxesInner[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return mixed[]|null
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param mixed[]|null $benefits benefits
     *
     * @return self
     */
    public function setBenefits($benefits)
    {
        if (is_null($benefits)) {
            throw new \InvalidArgumentException('non-nullable benefits cannot be null');
        }
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets benefit_overrides
     *
     * @return mixed[]|null
     */
    public function getBenefitOverrides()
    {
        return $this->container['benefit_overrides'];
    }

    /**
     * Sets benefit_overrides
     *
     * @param mixed[]|null $benefit_overrides benefit_overrides
     *
     * @return self
     */
    public function setBenefitOverrides($benefit_overrides)
    {
        if (is_null($benefit_overrides)) {
            throw new \InvalidArgumentException('non-nullable benefit_overrides cannot be null');
        }
        $this->container['benefit_overrides'] = $benefit_overrides;

        return $this;
    }

    /**
     * Gets post_tax_deductions
     *
     * @return mixed[]|null
     */
    public function getPostTaxDeductions()
    {
        return $this->container['post_tax_deductions'];
    }

    /**
     * Sets post_tax_deductions
     *
     * @param mixed[]|null $post_tax_deductions post_tax_deductions
     *
     * @return self
     */
    public function setPostTaxDeductions($post_tax_deductions)
    {
        if (is_null($post_tax_deductions)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deductions cannot be null');
        }
        $this->container['post_tax_deductions'] = $post_tax_deductions;

        return $this;
    }

    /**
     * Gets post_tax_deduction_overrides
     *
     * @return mixed[]|null
     */
    public function getPostTaxDeductionOverrides()
    {
        return $this->container['post_tax_deduction_overrides'];
    }

    /**
     * Sets post_tax_deduction_overrides
     *
     * @param mixed[]|null $post_tax_deduction_overrides post_tax_deduction_overrides
     *
     * @return self
     */
    public function setPostTaxDeductionOverrides($post_tax_deduction_overrides)
    {
        if (is_null($post_tax_deduction_overrides)) {
            throw new \InvalidArgumentException('non-nullable post_tax_deduction_overrides cannot be null');
        }
        $this->container['post_tax_deduction_overrides'] = $post_tax_deduction_overrides;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return mixed[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param mixed[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


