<?php
/**
 * ListPayrolls200ResponseInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListPayrolls200ResponseInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListPayrolls200ResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'list_payrolls_200_response_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'company' => 'string',
        'period_start' => 'string',
        'period_end' => 'string',
        'approval_deadline' => 'string',
        'approved_at' => 'string',
        'payday' => 'string',
        'status' => 'string',
        'type' => 'string',
        'pay_frequency' => 'string',
        'processing_period' => 'string',
        'off_cycle_options' => 'mixed',
        'managed' => 'bool',
        'totals' => '\OpenAPI\Client\Model\GetPayroll200ResponseTotals',
        'items' => '\OpenAPI\Client\Model\GetPayroll200ResponseItemsInner[]',
        'contractor_payments' => '\OpenAPI\Client\Model\GetPayroll200ResponseContractorPaymentsInner[]',
        'is_void' => 'bool',
        'metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'company' => null,
        'period_start' => null,
        'period_end' => null,
        'approval_deadline' => null,
        'approved_at' => null,
        'payday' => null,
        'status' => null,
        'type' => null,
        'pay_frequency' => null,
        'processing_period' => null,
        'off_cycle_options' => null,
        'managed' => null,
        'totals' => null,
        'items' => null,
        'contractor_payments' => null,
        'is_void' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'company' => false,
        'period_start' => false,
        'period_end' => false,
        'approval_deadline' => false,
        'approved_at' => false,
        'payday' => false,
        'status' => false,
        'type' => false,
        'pay_frequency' => false,
        'processing_period' => false,
        'off_cycle_options' => true,
        'managed' => false,
        'totals' => false,
        'items' => false,
        'contractor_payments' => false,
        'is_void' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company' => 'company',
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'approval_deadline' => 'approval_deadline',
        'approved_at' => 'approved_at',
        'payday' => 'payday',
        'status' => 'status',
        'type' => 'type',
        'pay_frequency' => 'pay_frequency',
        'processing_period' => 'processing_period',
        'off_cycle_options' => 'off_cycle_options',
        'managed' => 'managed',
        'totals' => 'totals',
        'items' => 'items',
        'contractor_payments' => 'contractor_payments',
        'is_void' => 'is_void',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company' => 'setCompany',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'approval_deadline' => 'setApprovalDeadline',
        'approved_at' => 'setApprovedAt',
        'payday' => 'setPayday',
        'status' => 'setStatus',
        'type' => 'setType',
        'pay_frequency' => 'setPayFrequency',
        'processing_period' => 'setProcessingPeriod',
        'off_cycle_options' => 'setOffCycleOptions',
        'managed' => 'setManaged',
        'totals' => 'setTotals',
        'items' => 'setItems',
        'contractor_payments' => 'setContractorPayments',
        'is_void' => 'setIsVoid',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company' => 'getCompany',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'approval_deadline' => 'getApprovalDeadline',
        'approved_at' => 'getApprovedAt',
        'payday' => 'getPayday',
        'status' => 'getStatus',
        'type' => 'getType',
        'pay_frequency' => 'getPayFrequency',
        'processing_period' => 'getProcessingPeriod',
        'off_cycle_options' => 'getOffCycleOptions',
        'managed' => 'getManaged',
        'totals' => 'getTotals',
        'items' => 'getItems',
        'contractor_payments' => 'getContractorPayments',
        'is_void' => 'getIsVoid',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('period_start', $data ?? [], null);
        $this->setIfExists('period_end', $data ?? [], null);
        $this->setIfExists('approval_deadline', $data ?? [], null);
        $this->setIfExists('approved_at', $data ?? [], null);
        $this->setIfExists('payday', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('pay_frequency', $data ?? [], null);
        $this->setIfExists('processing_period', $data ?? [], null);
        $this->setIfExists('off_cycle_options', $data ?? [], null);
        $this->setIfExists('managed', $data ?? [], true);
        $this->setIfExists('totals', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('contractor_payments', $data ?? [], null);
        $this->setIfExists('is_void', $data ?? [], true);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string|null
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string|null $period_start period_start
     *
     * @return self
     */
    public function setPeriodStart($period_start)
    {
        if (is_null($period_start)) {
            throw new \InvalidArgumentException('non-nullable period_start cannot be null');
        }
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string|null
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string|null $period_end period_end
     *
     * @return self
     */
    public function setPeriodEnd($period_end)
    {
        if (is_null($period_end)) {
            throw new \InvalidArgumentException('non-nullable period_end cannot be null');
        }
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets approval_deadline
     *
     * @return string|null
     */
    public function getApprovalDeadline()
    {
        return $this->container['approval_deadline'];
    }

    /**
     * Sets approval_deadline
     *
     * @param string|null $approval_deadline approval_deadline
     *
     * @return self
     */
    public function setApprovalDeadline($approval_deadline)
    {
        if (is_null($approval_deadline)) {
            throw new \InvalidArgumentException('non-nullable approval_deadline cannot be null');
        }
        $this->container['approval_deadline'] = $approval_deadline;

        return $this;
    }

    /**
     * Gets approved_at
     *
     * @return string|null
     */
    public function getApprovedAt()
    {
        return $this->container['approved_at'];
    }

    /**
     * Sets approved_at
     *
     * @param string|null $approved_at approved_at
     *
     * @return self
     */
    public function setApprovedAt($approved_at)
    {
        if (is_null($approved_at)) {
            throw new \InvalidArgumentException('non-nullable approved_at cannot be null');
        }
        $this->container['approved_at'] = $approved_at;

        return $this;
    }

    /**
     * Gets payday
     *
     * @return string|null
     */
    public function getPayday()
    {
        return $this->container['payday'];
    }

    /**
     * Sets payday
     *
     * @param string|null $payday payday
     *
     * @return self
     */
    public function setPayday($payday)
    {
        if (is_null($payday)) {
            throw new \InvalidArgumentException('non-nullable payday cannot be null');
        }
        $this->container['payday'] = $payday;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pay_frequency
     *
     * @return string|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param string|null $pay_frequency pay_frequency
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        if (is_null($pay_frequency)) {
            throw new \InvalidArgumentException('non-nullable pay_frequency cannot be null');
        }
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets processing_period
     *
     * @return string|null
     */
    public function getProcessingPeriod()
    {
        return $this->container['processing_period'];
    }

    /**
     * Sets processing_period
     *
     * @param string|null $processing_period processing_period
     *
     * @return self
     */
    public function setProcessingPeriod($processing_period)
    {
        if (is_null($processing_period)) {
            throw new \InvalidArgumentException('non-nullable processing_period cannot be null');
        }
        $this->container['processing_period'] = $processing_period;

        return $this;
    }

    /**
     * Gets off_cycle_options
     *
     * @return mixed|null
     */
    public function getOffCycleOptions()
    {
        return $this->container['off_cycle_options'];
    }

    /**
     * Sets off_cycle_options
     *
     * @param mixed|null $off_cycle_options off_cycle_options
     *
     * @return self
     */
    public function setOffCycleOptions($off_cycle_options)
    {
        if (is_null($off_cycle_options)) {
            array_push($this->openAPINullablesSetToNull, 'off_cycle_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('off_cycle_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['off_cycle_options'] = $off_cycle_options;

        return $this;
    }

    /**
     * Gets managed
     *
     * @return bool|null
     */
    public function getManaged()
    {
        return $this->container['managed'];
    }

    /**
     * Sets managed
     *
     * @param bool|null $managed managed
     *
     * @return self
     */
    public function setManaged($managed)
    {
        if (is_null($managed)) {
            throw new \InvalidArgumentException('non-nullable managed cannot be null');
        }
        $this->container['managed'] = $managed;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \OpenAPI\Client\Model\GetPayroll200ResponseTotals|null
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \OpenAPI\Client\Model\GetPayroll200ResponseTotals|null $totals totals
     *
     * @return self
     */
    public function setTotals($totals)
    {
        if (is_null($totals)) {
            throw new \InvalidArgumentException('non-nullable totals cannot be null');
        }
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\GetPayroll200ResponseItemsInner[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\GetPayroll200ResponseItemsInner[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets contractor_payments
     *
     * @return \OpenAPI\Client\Model\GetPayroll200ResponseContractorPaymentsInner[]|null
     */
    public function getContractorPayments()
    {
        return $this->container['contractor_payments'];
    }

    /**
     * Sets contractor_payments
     *
     * @param \OpenAPI\Client\Model\GetPayroll200ResponseContractorPaymentsInner[]|null $contractor_payments contractor_payments
     *
     * @return self
     */
    public function setContractorPayments($contractor_payments)
    {
        if (is_null($contractor_payments)) {
            throw new \InvalidArgumentException('non-nullable contractor_payments cannot be null');
        }
        $this->container['contractor_payments'] = $contractor_payments;

        return $this;
    }

    /**
     * Gets is_void
     *
     * @return bool|null
     */
    public function getIsVoid()
    {
        return $this->container['is_void'];
    }

    /**
     * Sets is_void
     *
     * @param bool|null $is_void is_void
     *
     * @return self
     */
    public function setIsVoid($is_void)
    {
        if (is_null($is_void)) {
            throw new \InvalidArgumentException('non-nullable is_void cannot be null');
        }
        $this->container['is_void'] = $is_void;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


