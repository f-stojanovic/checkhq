<?php
/**
 * GetAPaystub1200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Check API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-04-04
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetAPaystub1200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetAPaystub1200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_a_paystub_1_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payroll' => 'string',
        'payday' => 'string',
        'period_start' => 'string',
        'period_end' => 'string',
        'company' => '\OpenAPI\Client\Model\GetAPaystub1200ResponseCompany',
        'void_of' => 'mixed',
        'voided_by' => 'mixed',
        'contractor' => '\OpenAPI\Client\Model\GetAPaystub1200ResponseContractor',
        'net_pay' => 'string',
        'net_pay_ytd' => 'string',
        'amount' => 'string',
        'amount_ytd' => 'string',
        'reimbursement_amount' => 'string',
        'reimbursement_amount_ytd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payroll' => null,
        'payday' => null,
        'period_start' => null,
        'period_end' => null,
        'company' => null,
        'void_of' => null,
        'voided_by' => null,
        'contractor' => null,
        'net_pay' => null,
        'net_pay_ytd' => null,
        'amount' => null,
        'amount_ytd' => null,
        'reimbursement_amount' => null,
        'reimbursement_amount_ytd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payroll' => false,
        'payday' => false,
        'period_start' => false,
        'period_end' => false,
        'company' => false,
        'void_of' => true,
        'voided_by' => true,
        'contractor' => false,
        'net_pay' => false,
        'net_pay_ytd' => false,
        'amount' => false,
        'amount_ytd' => false,
        'reimbursement_amount' => false,
        'reimbursement_amount_ytd' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payroll' => 'payroll',
        'payday' => 'payday',
        'period_start' => 'period_start',
        'period_end' => 'period_end',
        'company' => 'company',
        'void_of' => 'void_of',
        'voided_by' => 'voided_by',
        'contractor' => 'contractor',
        'net_pay' => 'net_pay',
        'net_pay_ytd' => 'net_pay_ytd',
        'amount' => 'amount',
        'amount_ytd' => 'amount_ytd',
        'reimbursement_amount' => 'reimbursement_amount',
        'reimbursement_amount_ytd' => 'reimbursement_amount_ytd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payroll' => 'setPayroll',
        'payday' => 'setPayday',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'company' => 'setCompany',
        'void_of' => 'setVoidOf',
        'voided_by' => 'setVoidedBy',
        'contractor' => 'setContractor',
        'net_pay' => 'setNetPay',
        'net_pay_ytd' => 'setNetPayYtd',
        'amount' => 'setAmount',
        'amount_ytd' => 'setAmountYtd',
        'reimbursement_amount' => 'setReimbursementAmount',
        'reimbursement_amount_ytd' => 'setReimbursementAmountYtd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payroll' => 'getPayroll',
        'payday' => 'getPayday',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'company' => 'getCompany',
        'void_of' => 'getVoidOf',
        'voided_by' => 'getVoidedBy',
        'contractor' => 'getContractor',
        'net_pay' => 'getNetPay',
        'net_pay_ytd' => 'getNetPayYtd',
        'amount' => 'getAmount',
        'amount_ytd' => 'getAmountYtd',
        'reimbursement_amount' => 'getReimbursementAmount',
        'reimbursement_amount_ytd' => 'getReimbursementAmountYtd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payroll', $data ?? [], null);
        $this->setIfExists('payday', $data ?? [], null);
        $this->setIfExists('period_start', $data ?? [], null);
        $this->setIfExists('period_end', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('void_of', $data ?? [], null);
        $this->setIfExists('voided_by', $data ?? [], null);
        $this->setIfExists('contractor', $data ?? [], null);
        $this->setIfExists('net_pay', $data ?? [], null);
        $this->setIfExists('net_pay_ytd', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_ytd', $data ?? [], null);
        $this->setIfExists('reimbursement_amount', $data ?? [], null);
        $this->setIfExists('reimbursement_amount_ytd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payroll
     *
     * @return string|null
     */
    public function getPayroll()
    {
        return $this->container['payroll'];
    }

    /**
     * Sets payroll
     *
     * @param string|null $payroll payroll
     *
     * @return self
     */
    public function setPayroll($payroll)
    {
        if (is_null($payroll)) {
            throw new \InvalidArgumentException('non-nullable payroll cannot be null');
        }
        $this->container['payroll'] = $payroll;

        return $this;
    }

    /**
     * Gets payday
     *
     * @return string|null
     */
    public function getPayday()
    {
        return $this->container['payday'];
    }

    /**
     * Sets payday
     *
     * @param string|null $payday payday
     *
     * @return self
     */
    public function setPayday($payday)
    {
        if (is_null($payday)) {
            throw new \InvalidArgumentException('non-nullable payday cannot be null');
        }
        $this->container['payday'] = $payday;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string|null
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string|null $period_start period_start
     *
     * @return self
     */
    public function setPeriodStart($period_start)
    {
        if (is_null($period_start)) {
            throw new \InvalidArgumentException('non-nullable period_start cannot be null');
        }
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string|null
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string|null $period_end period_end
     *
     * @return self
     */
    public function setPeriodEnd($period_end)
    {
        if (is_null($period_end)) {
            throw new \InvalidArgumentException('non-nullable period_end cannot be null');
        }
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \OpenAPI\Client\Model\GetAPaystub1200ResponseCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \OpenAPI\Client\Model\GetAPaystub1200ResponseCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets void_of
     *
     * @return mixed|null
     */
    public function getVoidOf()
    {
        return $this->container['void_of'];
    }

    /**
     * Sets void_of
     *
     * @param mixed|null $void_of void_of
     *
     * @return self
     */
    public function setVoidOf($void_of)
    {
        if (is_null($void_of)) {
            array_push($this->openAPINullablesSetToNull, 'void_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('void_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['void_of'] = $void_of;

        return $this;
    }

    /**
     * Gets voided_by
     *
     * @return mixed|null
     */
    public function getVoidedBy()
    {
        return $this->container['voided_by'];
    }

    /**
     * Sets voided_by
     *
     * @param mixed|null $voided_by voided_by
     *
     * @return self
     */
    public function setVoidedBy($voided_by)
    {
        if (is_null($voided_by)) {
            array_push($this->openAPINullablesSetToNull, 'voided_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voided_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voided_by'] = $voided_by;

        return $this;
    }

    /**
     * Gets contractor
     *
     * @return \OpenAPI\Client\Model\GetAPaystub1200ResponseContractor|null
     */
    public function getContractor()
    {
        return $this->container['contractor'];
    }

    /**
     * Sets contractor
     *
     * @param \OpenAPI\Client\Model\GetAPaystub1200ResponseContractor|null $contractor contractor
     *
     * @return self
     */
    public function setContractor($contractor)
    {
        if (is_null($contractor)) {
            throw new \InvalidArgumentException('non-nullable contractor cannot be null');
        }
        $this->container['contractor'] = $contractor;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return string|null
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param string|null $net_pay net_pay
     *
     * @return self
     */
    public function setNetPay($net_pay)
    {
        if (is_null($net_pay)) {
            throw new \InvalidArgumentException('non-nullable net_pay cannot be null');
        }
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets net_pay_ytd
     *
     * @return string|null
     */
    public function getNetPayYtd()
    {
        return $this->container['net_pay_ytd'];
    }

    /**
     * Sets net_pay_ytd
     *
     * @param string|null $net_pay_ytd net_pay_ytd
     *
     * @return self
     */
    public function setNetPayYtd($net_pay_ytd)
    {
        if (is_null($net_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable net_pay_ytd cannot be null');
        }
        $this->container['net_pay_ytd'] = $net_pay_ytd;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_ytd
     *
     * @return string|null
     */
    public function getAmountYtd()
    {
        return $this->container['amount_ytd'];
    }

    /**
     * Sets amount_ytd
     *
     * @param string|null $amount_ytd amount_ytd
     *
     * @return self
     */
    public function setAmountYtd($amount_ytd)
    {
        if (is_null($amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable amount_ytd cannot be null');
        }
        $this->container['amount_ytd'] = $amount_ytd;

        return $this;
    }

    /**
     * Gets reimbursement_amount
     *
     * @return string|null
     */
    public function getReimbursementAmount()
    {
        return $this->container['reimbursement_amount'];
    }

    /**
     * Sets reimbursement_amount
     *
     * @param string|null $reimbursement_amount reimbursement_amount
     *
     * @return self
     */
    public function setReimbursementAmount($reimbursement_amount)
    {
        if (is_null($reimbursement_amount)) {
            throw new \InvalidArgumentException('non-nullable reimbursement_amount cannot be null');
        }
        $this->container['reimbursement_amount'] = $reimbursement_amount;

        return $this;
    }

    /**
     * Gets reimbursement_amount_ytd
     *
     * @return string|null
     */
    public function getReimbursementAmountYtd()
    {
        return $this->container['reimbursement_amount_ytd'];
    }

    /**
     * Sets reimbursement_amount_ytd
     *
     * @param string|null $reimbursement_amount_ytd reimbursement_amount_ytd
     *
     * @return self
     */
    public function setReimbursementAmountYtd($reimbursement_amount_ytd)
    {
        if (is_null($reimbursement_amount_ytd)) {
            throw new \InvalidArgumentException('non-nullable reimbursement_amount_ytd cannot be null');
        }
        $this->container['reimbursement_amount_ytd'] = $reimbursement_amount_ytd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


